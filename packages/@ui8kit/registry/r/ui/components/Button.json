{
  "$schema": "https://buildy.tw/schema/registry-item.json",
  "name": "Button",
  "type": "registry:component",
  "description": "",
  "dependencies": [
    "react"
  ],
  "devDependencies": [],
  "files": [
    {
      "path": "src/components/Button/Button.tsx",
      "content": "import type { ReactNode } from \"react\";\r\nimport { forwardRef } from \"react\";\r\nimport {\r\n  Button as BaseButton,\r\n  spacingVariants,\r\n  roundedVariants,\r\n  shadowVariants,\r\n  layoutVariants,\r\n  buttonSizeVariants,\r\n  buttonStyleVariants,\r\n  buttonContentAlignVariants,\r\n  type VariantSpacingProps,\r\n  type RoundedProps,\r\n  type ShadowProps,\r\n  type VariantLayoutProps,\r\n  type ButtonSizeProps,\r\n  type ButtonStyleProps,\r\n  type ButtonContentAlignProps,\r\n  cn\r\n} from \"../../core\";\r\n\r\nexport interface ButtonProps \r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    Pick<VariantSpacingProps, 'm' | 'mx' | 'my'>,\r\n    RoundedProps,\r\n    ShadowProps,\r\n    Pick<VariantLayoutProps, 'w'>,\r\n    ButtonSizeProps,\r\n    ButtonStyleProps,\r\n    ButtonContentAlignProps {\r\n  children: ReactNode;\r\n  leftSection?: ReactNode;\r\n  rightSection?: ReactNode;\r\n  loading?: boolean;\r\n  disabled?: boolean;\r\n  mr?: 1 | 2 | 3 | 4 | 0;\r\n}\r\n\r\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ \r\n    children, \r\n    className,\r\n    variant = 'default',\r\n    size = 'default',\r\n    rounded = 'lg',\r\n    shadow,\r\n    loading = false,\r\n    disabled = false,\r\n    // Spacing props  \r\n    m, mx, my,\r\n    mr = 1,\r\n    // Layout props\r\n    w,\r\n    // Content props\r\n    leftSection,\r\n    rightSection,\r\n    contentAlign,\r\n    ...props \r\n  }, ref) => {\r\n    return (\r\n      <BaseButton\r\n        ref={ref}\r\n        data-class=\"button\"\r\n        disabled={disabled || loading}\r\n        className={cn(\r\n          // Base button styles\r\n          'inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]',\r\n          // Apply CVA variants\r\n          buttonSizeVariants({ size }),\r\n          buttonStyleVariants({ variant }),\r\n          buttonContentAlignVariants({ contentAlign }),\r\n          spacingVariants({ m, mx, my }),\r\n          roundedVariants({ rounded }),\r\n          shadowVariants({ shadow }),\r\n          layoutVariants({ w }),\r\n          // Apply mr spacing for icons\r\n          `mr-${mr}`,\r\n          // Loading state\r\n          loading && 'cursor-wait',\r\n          className\r\n        )}\r\n        {...props}\r\n      >\r\n        {loading && (\r\n          <div \r\n            data-class=\"button-loading-spinner\"\r\n            className={`mr-${mr} h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent`} \r\n          />\r\n        )}\r\n        {!loading && leftSection && (\r\n          <span data-class=\"button-left-section\" className={`mr-${mr}`}>\r\n            {leftSection}\r\n          </span>\r\n        )}\r\n        {children}\r\n        {!loading && rightSection && (\r\n          <span data-class=\"button-right-section\" className={`ml-${mr}`}>\r\n            {rightSection}\r\n          </span>\r\n        )}\r\n      </BaseButton>\r\n    );\r\n  }\r\n);\r\n\r\nButton.displayName = \"Button\"; ",
      "target": "components"
    }
  ]
}