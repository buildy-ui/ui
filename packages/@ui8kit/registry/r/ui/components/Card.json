{
  "$schema": "https://buildy.tw/schema/registry-item.json",
  "name": "Card",
  "type": "registry:component",
  "description": "Main Card component interface",
  "dependencies": [
    "react"
  ],
  "devDependencies": [],
  "files": [
    {
      "path": "src/components/Card/Card.tsx",
      "content": "import type { ReactNode } from \"react\";\r\nimport { forwardRef } from \"react\";\r\nimport {\r\n  Card as BaseCard,\r\n  Stack,\r\n  spacingVariants,\r\n  roundedVariants,\r\n  shadowVariants,\r\n  colorVariants,\r\n  borderVariants,\r\n  layoutVariants,\r\n  textSizeVariants,\r\n  type VariantSpacingProps,\r\n  type RoundedProps,\r\n  type ShadowProps,\r\n  type ColorProps,\r\n  type BorderProps,\r\n  type VariantLayoutProps,\r\n  type TextSizeProps,\r\n  cn\r\n} from \"../../core\";\r\n\r\n// Main Card component interface\r\ninterface CardProps \r\n  extends React.HTMLAttributes<HTMLDivElement>,\r\n    VariantSpacingProps,\r\n    RoundedProps,\r\n    ShadowProps,\r\n    ColorProps,\r\n    BorderProps,\r\n    Pick<VariantLayoutProps, 'w' | 'h'> {\r\n  children: ReactNode;\r\n  variant?: 'default' | 'outlined' | 'filled';\r\n}\r\n\r\n// Enhanced Card component with prop forwarding\r\nconst Card = forwardRef<HTMLDivElement, CardProps>(\r\n  ({ \r\n    children, \r\n    className,\r\n    variant = 'default',\r\n    // Spacing props\r\n    p, px, py, pt, pb, pl, pr,\r\n    m, mx, my, mt, mb, ml, mr,\r\n    // Visual props\r\n    rounded = 'lg',\r\n    shadow = 'sm',\r\n    bg = 'card',\r\n    c,\r\n    borderColor = 'border',\r\n    // Border props  \r\n    border = '1px',\r\n    borderTop,\r\n    borderBottom,\r\n    borderLeft,\r\n    borderRight,\r\n    // Layout props\r\n    w,\r\n    h,\r\n    ...props \r\n  }, ref) => {\r\n    return (\r\n      <BaseCard\r\n        ref={ref}\r\n        data-class=\"card\"\r\n        className={cn(\r\n          // Base card styles\r\n          'text-card-foreground transition-colors',\r\n          // Apply CVA variants\r\n          spacingVariants({ p: p || 'md', px, py, pt, pb, pl, pr, m, mx, my, mt, mb, ml, mr }),\r\n          roundedVariants({ rounded }),\r\n          shadowVariants({ shadow }),\r\n          colorVariants({ bg, c }),\r\n          borderVariants({ border, borderTop, borderBottom, borderLeft, borderRight }),\r\n          colorVariants({ borderColor }),\r\n          layoutVariants({ w, h }),\r\n          // Variant-specific styles\r\n          {\r\n            'border-border': variant === 'default',\r\n            'border-border shadow-none': variant === 'outlined',\r\n            'border-transparent bg-muted/50': variant === 'filled',\r\n          },\r\n          className\r\n        )}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </BaseCard>\r\n    );\r\n  }\r\n);\r\n\r\nCard.displayName = \"Card\";\r\n\r\n// Card.Header component\r\ninterface CardHeaderProps \r\n  extends React.HTMLAttributes<HTMLDivElement>,\r\n    Pick<VariantSpacingProps, 'p' | 'px' | 'py'> {\r\n  children: ReactNode;\r\n}\r\n\r\nconst CardHeader = forwardRef<HTMLDivElement, CardHeaderProps>(\r\n  ({ \r\n    children, \r\n    className,\r\n    p = 'md',\r\n    px,\r\n    py,\r\n    ...props \r\n  }, ref) => {\r\n    return (\r\n      <Stack\r\n        ref={ref}\r\n        data-class=\"card-header\"\r\n        className={cn(\r\n          'flex flex-col space-y-1.5',\r\n          spacingVariants({ p, px, py }),\r\n          className\r\n        )}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </Stack>\r\n    );\r\n  }\r\n);\r\n\r\nCardHeader.displayName = \"CardHeader\";\r\n\r\n// Card.Title component\r\ninterface CardTitleProps \r\n  extends React.HTMLAttributes<HTMLHeadingElement>,\r\n    TextSizeProps {\r\n  children: ReactNode;\r\n  order?: 1 | 2 | 3 | 4 | 5 | 6;\r\n}\r\n\r\nconst CardTitle = forwardRef<HTMLHeadingElement, CardTitleProps>(\r\n  ({ \r\n    children, \r\n    className,\r\n    size = 'lg',\r\n    order = 3,\r\n    ...props \r\n  }, ref) => {\r\n    // Create props for the heading element\r\n    const headingProps = {\r\n      ref,\r\n      'data-class': 'card-title',\r\n      className: cn(\r\n        'font-semibold leading-none tracking-tight',\r\n        // Apply CVA variants\r\n        textSizeVariants({ size }),\r\n        className\r\n      ),\r\n      ...props\r\n    };\r\n\r\n    // Return the appropriate heading element\r\n    switch (order) {\r\n      case 1:\r\n        return <h1 {...headingProps}>{children}</h1>;\r\n      case 2:\r\n        return <h2 {...headingProps}>{children}</h2>;\r\n      case 3:\r\n        return <h3 {...headingProps}>{children}</h3>;\r\n      case 4:\r\n        return <h4 {...headingProps}>{children}</h4>;\r\n      case 5:\r\n        return <h5 {...headingProps}>{children}</h5>;\r\n      case 6:\r\n        return <h6 {...headingProps}>{children}</h6>;\r\n      default:\r\n        return <h3 {...headingProps}>{children}</h3>;\r\n    }\r\n  }\r\n);\r\n\r\nCardTitle.displayName = \"CardTitle\";\r\n\r\n// Card.Description component\r\ninterface CardDescriptionProps \r\n  extends React.HTMLAttributes<HTMLParagraphElement> {\r\n  children: ReactNode;\r\n}\r\n\r\nconst CardDescription = forwardRef<HTMLParagraphElement, CardDescriptionProps>(\r\n  ({ children, className, ...props }, ref) => (\r\n    <p\r\n      ref={ref}\r\n      data-class=\"card-description\"\r\n      className={cn(\r\n        'text-sm text-muted-foreground',\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </p>\r\n  )\r\n);\r\n\r\nCardDescription.displayName = \"CardDescription\";\r\n\r\n// Card.Content component\r\ninterface CardContentProps \r\n  extends React.HTMLAttributes<HTMLDivElement>,\r\n    Pick<VariantSpacingProps, 'p' | 'px' | 'py'> {\r\n  children: ReactNode;\r\n}\r\n\r\nconst CardContent = forwardRef<HTMLDivElement, CardContentProps>(\r\n  ({ \r\n    children, \r\n    className,\r\n    p = 'md',\r\n    px,\r\n    py,\r\n    ...props \r\n  }, ref) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        data-class=\"card-content\"\r\n        className={cn(\r\n          spacingVariants({ p, px, py }),\r\n          className\r\n        )}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nCardContent.displayName = \"CardContent\";\r\n\r\n// Card.Footer component\r\ninterface CardFooterProps \r\n  extends React.HTMLAttributes<HTMLDivElement>,\r\n    Pick<VariantSpacingProps, 'p' | 'px' | 'py'> {\r\n  children: ReactNode;\r\n}\r\n\r\nconst CardFooter = forwardRef<HTMLDivElement, CardFooterProps>(\r\n  ({ \r\n    children, \r\n    className,\r\n    p = 'md',\r\n    px,\r\n    py,\r\n    ...props \r\n  }, ref) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        data-class=\"card-footer\"\r\n        className={cn(\r\n          'flex items-center pt-0',\r\n          spacingVariants({ p, px, py }),\r\n          className\r\n        )}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nCardFooter.displayName = \"CardFooter\";\r\n\r\n// Compound Card component\r\nconst CompoundCard = Object.assign(Card, {\r\n  Header: CardHeader,\r\n  Title: CardTitle,\r\n  Description: CardDescription,\r\n  Content: CardContent,\r\n  Footer: CardFooter,\r\n});\r\n\r\n// Export types and components\r\nexport type { CardProps, CardHeaderProps, CardTitleProps, CardDescriptionProps, CardContentProps, CardFooterProps };\r\nexport { CompoundCard as Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter }; ",
      "target": "components"
    }
  ]
}