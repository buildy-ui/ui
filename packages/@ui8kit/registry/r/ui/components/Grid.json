{
  "$schema": "https://buildy.tw/schema/registry-item.json",
  "name": "Grid",
  "type": "registry:component",
  "description": "Main Grid component interface",
  "dependencies": [
    "react"
  ],
  "devDependencies": [],
  "files": [
    {
      "path": "src/components/Grid/Grid.tsx",
      "content": "import type { ReactNode } from \"react\";\r\nimport { forwardRef } from \"react\";\r\nimport {\r\n  Grid as BaseGrid,\r\n  Element as BaseElement,\r\n  gridVariants,\r\n  spacingVariants,\r\n  colorVariants,\r\n  layoutVariants,\r\n  type VariantSpacingProps,\r\n  type ColorProps,\r\n  type VariantLayoutProps,\r\n  cn\r\n} from \"../../core\";\r\n\r\n// Main Grid component interface\r\nexport interface GridProps \r\n  extends VariantSpacingProps,\r\n    ColorProps,\r\n    VariantLayoutProps {\r\n  cols?: \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"1-2\" | \"1-3\" | \"1-4\" | \"1-5\" | \"1-6\" | \"2-3\" | \"2-4\" | \"2-5\" | \"2-6\" | \"3-4\" | \"3-5\" | \"3-6\" | \"4-5\" | \"4-6\" | \"5-6\" | \"1-2-3\" | \"1-2-4\" | \"1-2-6\" | \"1-3-4\" | \"1-3-6\" | \"2-3-4\" | \"1-2-3-4\";\r\n  gap?: \"none\" | \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\" | \"3xl\";\r\n  align?: \"start\" | \"center\" | \"end\" | \"stretch\";\r\n  justify?: \"start\" | \"center\" | \"end\" | \"between\" | \"around\" | \"evenly\";\r\n  className?: string;\r\n  children?: ReactNode;\r\n  [key: string]: any;\r\n}\r\n\r\n// Enhanced Grid component with prop forwarding\r\nconst Grid = forwardRef<HTMLElement, GridProps>(\r\n  ({ \r\n    children, \r\n    className,\r\n    cols = \"1\",\r\n    gap = \"md\",\r\n    align = \"stretch\",\r\n    justify = \"start\",\r\n    // Spacing props\r\n    p, px, py, pt, pb, pl, pr,\r\n    m, mx, my, mt, mb, ml, mr,\r\n    // Color props\r\n    bg, c,\r\n    // Layout props\r\n    w, h,\r\n    ...props \r\n  }, ref) => {\r\n    return (\r\n      <BaseGrid\r\n        ref={ref}\r\n        className={cn(\r\n          // Apply grid variants\r\n          gridVariants({ cols, gap, align, justify }),\r\n          // Apply spacing variants\r\n          spacingVariants({\r\n            p, px, py, pt, pb, pl, pr,\r\n            m, mx, my, mt, mb, ml, mr\r\n          }),\r\n          // Apply color variants\r\n          colorVariants({ bg, c }),\r\n          // Apply layout variants  \r\n          layoutVariants({ w, h }),\r\n          className\r\n        )}\r\n        data-class=\"grid\"\r\n        {...props}\r\n      >\r\n        {children}\r\n      </BaseGrid>\r\n    );\r\n  }\r\n);\r\n\r\nGrid.displayName = \"Grid\";\r\n\r\n// GridCol component interface\r\nexport interface GridColProps {\r\n  span?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | \"auto\" | \"full\";\r\n  start?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | \"auto\";\r\n  end?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | \"auto\";\r\n  order?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | \"first\" | \"last\" | \"none\";\r\n  className?: string;\r\n  children?: ReactNode;\r\n  [key: string]: any;\r\n}\r\n\r\n// GridCol component for grid items\r\nconst GridCol = forwardRef<HTMLElement, GridColProps>(\r\n  ({ children, className, span, start, end, order, ...props }, ref) => {\r\n    return (\r\n      <BaseElement\r\n        component=\"div\"\r\n        ref={ref}\r\n        className={cn(\r\n          // Span utility classes\r\n          span === 1 && 'col-span-1',\r\n          span === 2 && 'col-span-2',\r\n          span === 3 && 'col-span-3',\r\n          span === 4 && 'col-span-4',\r\n          span === 5 && 'col-span-5',\r\n          span === 6 && 'col-span-6',\r\n          span === 7 && 'col-span-7',\r\n          span === 8 && 'col-span-8',\r\n          span === 9 && 'col-span-9',\r\n          span === 10 && 'col-span-10',\r\n          span === 11 && 'col-span-11',\r\n          span === 12 && 'col-span-12',\r\n          span === 'auto' && 'col-auto',\r\n          span === 'full' && 'col-span-full',\r\n          \r\n          // Start utility classes\r\n          start === 1 && 'col-start-1',\r\n          start === 2 && 'col-start-2',\r\n          start === 3 && 'col-start-3',\r\n          start === 4 && 'col-start-4',\r\n          start === 5 && 'col-start-5',\r\n          start === 6 && 'col-start-6',\r\n          start === 7 && 'col-start-7',\r\n          start === 8 && 'col-start-8',\r\n          start === 9 && 'col-start-9',\r\n          start === 10 && 'col-start-10',\r\n          start === 11 && 'col-start-11',\r\n          start === 12 && 'col-start-12',\r\n          start === 13 && 'col-start-13',\r\n          start === 'auto' && 'col-start-auto',\r\n          \r\n          // End utility classes\r\n          end === 1 && 'col-end-1',\r\n          end === 2 && 'col-end-2',\r\n          end === 3 && 'col-end-3',\r\n          end === 4 && 'col-end-4',\r\n          end === 5 && 'col-end-5',\r\n          end === 6 && 'col-end-6',\r\n          end === 7 && 'col-end-7',\r\n          end === 8 && 'col-end-8',\r\n          end === 9 && 'col-end-9',\r\n          end === 10 && 'col-end-10',\r\n          end === 11 && 'col-end-11',\r\n          end === 12 && 'col-end-12',\r\n          end === 13 && 'col-end-13',\r\n          end === 'auto' && 'col-end-auto',\r\n          \r\n          // Order utility classes\r\n          order === 1 && 'order-1',\r\n          order === 2 && 'order-2',\r\n          order === 3 && 'order-3',\r\n          order === 4 && 'order-4',\r\n          order === 5 && 'order-5',\r\n          order === 6 && 'order-6',\r\n          order === 7 && 'order-7',\r\n          order === 8 && 'order-8',\r\n          order === 9 && 'order-9',\r\n          order === 10 && 'order-10',\r\n          order === 11 && 'order-11',\r\n          order === 12 && 'order-12',\r\n          order === 'first' && 'order-first',\r\n          order === 'last' && 'order-last',\r\n          order === 'none' && 'order-none',\r\n          \r\n          className\r\n        )}\r\n        data-class=\"grid-col\"\r\n        {...props}\r\n      >\r\n        {children}\r\n      </BaseElement>\r\n    );\r\n  }\r\n);\r\n\r\nGridCol.displayName = \"GridCol\";\r\n\r\n// Compound Grid component\r\nconst CompoundGrid = Object.assign(Grid, {\r\n  Col: GridCol,\r\n});\r\n\r\n// Export the Grid component and types\r\nexport { CompoundGrid as Grid, GridCol }; ",
      "target": "components"
    }
  ]
}