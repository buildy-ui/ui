{
  "$schema": "https://buildy.tw/schema/registry-item.json",
  "name": "LayoutBlock",
  "type": "registry:layout",
  "description": "Layout types",
  "dependencies": [
    "react"
  ],
  "devDependencies": [],
  "files": [
    {
      "path": "src/layouts/LayoutBlock.tsx",
      "content": "import type { ReactNode } from \"react\";\r\nimport { forwardRef } from \"react\";\r\nimport {\r\n  Block,\r\n  Container,\r\n  Grid,\r\n  Stack,\r\n  Title,\r\n  Text,\r\n  Badge,\r\n  Icon,\r\n  Box,\r\n  Card,\r\n  Image,\r\n  Group\r\n} from \"../components\";\r\nimport type { VariantSpacingProps, ContainerSizingProps, VariantGridProps, VariantFlexProps } from \"../core/variants\";\r\n\r\n// Layout types\r\nexport type LayoutType = \"grid\" | \"flex\" | \"stack\";\r\n\r\n// Content hook system - allows replacing parts of the content\r\nexport interface LayoutContentHooks {\r\n  beforeHeader?: (content: any) => ReactNode;\r\n  header?: (content: any) => ReactNode;\r\n  afterHeader?: (content: any) => ReactNode;\r\n  beforeItems?: (content: any) => ReactNode;\r\n  item?: (item: any, index: number) => ReactNode;\r\n  afterItems?: (content: any) => ReactNode;\r\n}\r\n\r\nexport interface LayoutBlockProps {\r\n  // Layout control\r\n  layout: LayoutType;\r\n  \r\n  // Container settings\r\n  useContainer?: boolean;\r\n  containerSize?: ContainerSizingProps[\"size\"];\r\n  padding?: VariantSpacingProps[\"px\"] | null;\r\n  py?: VariantSpacingProps[\"py\"];\r\n\r\n  // Grid settings (for layout=\"grid\")\r\n  cols?: VariantGridProps[\"cols\"];\r\n  gridCols?: VariantGridProps[\"cols\"];\r\n  gap?: VariantGridProps[\"gap\"];\r\n  align?: VariantGridProps[\"align\"];\r\n  justify?: VariantGridProps[\"justify\"];\r\n\r\n  // Flex settings (for layout=\"flex\")\r\n  wrap?: VariantFlexProps[\"wrap\"];\r\n  flexWrap?: boolean;\r\n\r\n  // Stack settings (for layout=\"stack\")\r\n  stackAlign?: VariantFlexProps[\"align\"];\r\n\r\n  // Header settings\r\n  showHeader?: boolean;\r\n  headerAlign?: \"start\" | \"center\" | \"end\";\r\n\r\n  // Data for content\r\n  content?: {\r\n    badge?: string;\r\n    title?: string;\r\n    description?: string;\r\n    items?: Array<{\r\n      id: string;\r\n      title?: string;\r\n      description: string;\r\n      image?: {\r\n        src: string;\r\n        alt: string;\r\n      };\r\n      lucideIcon?: any;\r\n      [key: string]: any;\r\n    }>;\r\n    [key: string]: any;\r\n  };\r\n\r\n  // Content hook system\r\n  contentHooks?: LayoutContentHooks;\r\n\r\n  // Custom class name\r\n  className?: string;\r\n}\r\n\r\n// Default header renderer\r\nconst DefaultHeaderRenderer = ({ content, align = \"center\" }: { content: any; align?: \"start\" | \"center\" | \"end\" }) => {\r\n  if (!content) return null;\r\n\r\n  const textAlign = align === \"start\" ? \"left\" : align === \"end\" ? \"right\" : \"center\";\r\n\r\n  return (\r\n    <Stack gap=\"md\" align={align} ta={textAlign} className=\"max-w-2xl\">\r\n      {content.badge && (\r\n        <Badge variant=\"secondary\" rounded=\"full\">\r\n          {content.badge}\r\n        </Badge>\r\n      )}\r\n\r\n      {content.title && (\r\n        <Title\r\n          order={2}\r\n          size=\"3xl\"\r\n          fw=\"bold\"\r\n          ta={textAlign}\r\n        >\r\n          {content.title}\r\n        </Title>\r\n      )}\r\n\r\n      {content.description && (\r\n        <Text\r\n          c=\"secondary-foreground\"\r\n          ta={textAlign}\r\n        >\r\n          {content.description}\r\n        </Text>\r\n      )}\r\n    </Stack>\r\n  );\r\n};\r\n\r\n// Default item renderers for different layouts\r\nconst DefaultItemRenderers = {\r\n  // Card-based grid item\r\n  gridCard: (item: any, _index: number) => (\r\n    <Card p=\"lg\" rounded=\"lg\" shadow=\"sm\" className=\"h-full\">\r\n      <Stack gap=\"md\" align=\"start\">\r\n        {item.image && (\r\n          <Image\r\n            src={item.image.src}\r\n            alt={item.image.alt}\r\n            width=\"100%\"\r\n            height=\"200px\"\r\n            fit=\"cover\"\r\n            rounded=\"sm\"\r\n          />\r\n        )}\r\n\r\n        {item.lucideIcon && (\r\n          <Box \r\n            p=\"sm\" \r\n            bg=\"primary\" \r\n            rounded=\"lg\" \r\n            className=\"inline-flex\"\r\n            data-class=\"icon-wrapper\"\r\n          >\r\n            <Icon\r\n              lucideIcon={item.lucideIcon}\r\n              c=\"primary-foreground\"\r\n            />\r\n          </Box>\r\n        )}\r\n\r\n        <Stack gap=\"xs\">\r\n          <Title order={3} size=\"lg\" fw=\"semibold\">\r\n            {item.title}\r\n          </Title>\r\n          \r\n          <Text c=\"secondary-foreground\">\r\n            {item.description}\r\n          </Text>\r\n        </Stack>\r\n      </Stack>\r\n    </Card>\r\n  ),\r\n\r\n  // Simple grid item\r\n  gridSimple: (item: any, _index: number) => (\r\n    <Stack gap=\"md\" align=\"start\">\r\n      {item.lucideIcon && (\r\n        <Box \r\n          p=\"sm\" \r\n          bg=\"primary\" \r\n          rounded=\"lg\" \r\n          className=\"inline-flex\"\r\n          data-class=\"icon-wrapper\"\r\n        >\r\n          <Icon\r\n            lucideIcon={item.lucideIcon}\r\n            c=\"primary-foreground\"\r\n          />\r\n        </Box>\r\n      )}\r\n\r\n      <Stack gap=\"xs\">\r\n        <Title order={3} size=\"lg\" fw=\"semibold\">\r\n          {item.title}\r\n        </Title>\r\n        \r\n        <Text size=\"sm\" c=\"secondary-foreground\">\r\n          {item.description}\r\n        </Text>\r\n      </Stack>\r\n    </Stack>\r\n  ),\r\n\r\n  // Flex/Stack item\r\n  flexItem: (item: any, _index: number) => (\r\n    <Group gap=\"md\" align=\"start\">\r\n      {item.lucideIcon && (\r\n        <Box \r\n          p=\"sm\" \r\n          bg=\"primary\" \r\n          rounded=\"lg\" \r\n          className=\"flex-shrink-0\"\r\n          data-class=\"icon-wrapper\"\r\n        >\r\n          <Icon\r\n            lucideIcon={item.lucideIcon}\r\n            c=\"primary-foreground\"\r\n          />\r\n        </Box>\r\n      )}\r\n\r\n      <Stack gap=\"xs\">\r\n        <Title order={3} size=\"lg\" fw=\"semibold\">\r\n          {item.title}\r\n        </Title>\r\n        \r\n        <Text c=\"secondary-foreground\">\r\n          {item.description}\r\n        </Text>\r\n      </Stack>\r\n    </Group>\r\n  )\r\n};\r\n\r\n// Default content hooks\r\nexport const defaultLayoutContentHooks = {\r\n  // Grid with cards\r\n  gridCards: {\r\n    header: (content: any) => <DefaultHeaderRenderer content={content} align=\"center\" />,\r\n    item: DefaultItemRenderers.gridCard\r\n  },\r\n\r\n  // Grid simple\r\n  gridSimple: {\r\n    header: (content: any) => <DefaultHeaderRenderer content={content} align=\"center\" />,\r\n    item: DefaultItemRenderers.gridSimple\r\n  },\r\n\r\n  // Flex layout\r\n  flex: {\r\n    header: (content: any) => <DefaultHeaderRenderer content={content} align=\"start\" />,\r\n    item: DefaultItemRenderers.flexItem\r\n  },\r\n\r\n  // Stack layout\r\n  stack: {\r\n    header: (content: any) => <DefaultHeaderRenderer content={content} align=\"center\" />,\r\n    item: DefaultItemRenderers.flexItem\r\n  }\r\n};\r\n\r\nexport const LayoutBlock = forwardRef<HTMLElement, LayoutBlockProps>(\r\n  ({ \r\n    layout = \"grid\",\r\n    useContainer = true,\r\n    containerSize = \"lg\",\r\n    padding = \"md\",\r\n    py = \"xl\",\r\n    cols,\r\n    gridCols, // Add gridCols prop\r\n    gap = \"lg\",\r\n    align = \"start\",\r\n    justify = \"start\",\r\n\r\n    wrap = \"wrap\",\r\n    flexWrap, // Add flexWrap prop\r\n    stackAlign = \"start\",\r\n    showHeader = true,\r\n    headerAlign = \"center\",\r\n    content,\r\n    contentHooks,\r\n    className,\r\n    ...props\r\n  }, ref) => {\r\n\r\n    // Use gridCols if provided, fallback to cols\r\n    const finalCols = gridCols || cols || \"1-2-3\";\r\n    const finalWrap = flexWrap ? \"wrap\" : wrap;\r\n\r\n    // Choose default content hooks based on layout\r\n    const defaultHooks = contentHooks || defaultLayoutContentHooks[layout as keyof typeof defaultLayoutContentHooks] || defaultLayoutContentHooks.gridSimple;\r\n\r\n    // Render header\r\n    const renderHeader = () => {\r\n      if (!showHeader) return null;\r\n      \r\n      if (defaultHooks.header) {\r\n        return defaultHooks.header(content);\r\n      }\r\n      \r\n      return <DefaultHeaderRenderer content={content} align={headerAlign} />;\r\n    };\r\n\r\n    // Render items based on layout\r\n    const renderItems = () => {\r\n      if (!content?.items || content.items.length === 0) return null;\r\n\r\n      const itemRenderer = defaultHooks.item || DefaultItemRenderers.gridSimple;\r\n      \r\n      // Add key prop to mapped items\r\n      const items = content.items.map((item: any, index: number) => (\r\n        <div key={item.id || `item-${index}`}>\r\n          {itemRenderer(item, index)}\r\n        </div>\r\n      ));\r\n\r\n      // Wrap items in appropriate layout component\r\n      switch (layout) {\r\n        case \"grid\":\r\n          return (\r\n            <Grid \r\n              cols={finalCols} \r\n              gap={gap} \r\n              align={align} \r\n              justify={justify}\r\n              data-class=\"layout-grid\"\r\n            >\r\n              {items}\r\n            </Grid>\r\n          );\r\n\r\n        case \"flex\":\r\n          return (\r\n            <Group \r\n              gap={gap} \r\n              align={align} \r\n              justify={justify}\r\n              wrap={finalWrap}\r\n              data-class=\"layout-flex\"\r\n            >\r\n              {items}\r\n            </Group>\r\n          );\r\n\r\n        case \"stack\":\r\n          return (\r\n            <Stack \r\n              gap={gap} \r\n              align={stackAlign}\r\n              data-class=\"layout-stack\"\r\n            >\r\n              {items}\r\n            </Stack>\r\n          );\r\n\r\n        default:\r\n          return items;\r\n      }\r\n    };\r\n\r\n    // Main content\r\n    const mainContent = (\r\n      <Stack gap=\"3xl\" align={headerAlign}>\r\n        {renderHeader()}\r\n        {renderItems()}\r\n      </Stack>\r\n    );\r\n\r\n    // Render with or without container\r\n    return (\r\n      <Block\r\n        component=\"section\"\r\n        ref={ref}\r\n        w=\"full\"\r\n        py={py}\r\n        className={className}\r\n        data-class=\"layout-block\"\r\n        {...props}\r\n      >\r\n        {useContainer ? (\r\n          <Container size={containerSize} px={padding} centered>\r\n            {mainContent}\r\n          </Container>\r\n        ) : (\r\n          mainContent\r\n        )}\r\n      </Block>\r\n    );\r\n  }\r\n);\r\n\r\nLayoutBlock.displayName = \"LayoutBlock\";\r\n\r\n// Utility function for creating content hooks\r\nexport const createLayoutContentHook = (hooks: LayoutContentHooks): LayoutContentHooks => hooks;",
      "target": "layouts"
    }
  ]
}