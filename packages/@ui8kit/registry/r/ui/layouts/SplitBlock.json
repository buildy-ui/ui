{
  "$schema": "https://buildy.tw/schema/registry-item.json",
  "name": "SplitBlock",
  "type": "registry:layout",
  "description": "Content hook system - allows replacing parts of the content",
  "dependencies": [
    "react"
  ],
  "devDependencies": [],
  "files": [
    {
      "path": "src/layouts/SplitBlock.tsx",
      "content": "import type { ReactNode } from \"react\";\r\nimport { forwardRef } from \"react\";\r\nimport {\r\n  Block,\r\n  Container,\r\n  Grid\r\n} from \"../components\";\r\nimport type { VariantSpacingProps, ContainerSizingProps, VariantGridProps } from \"../core/variants\";\r\n\r\n// Content hook system - allows replacing parts of the content\r\nexport interface ContentHooks {\r\n  beforeContent?: (content: any) => ReactNode;\r\n  content?: (content: any) => ReactNode;\r\n  afterContent?: (content: any) => ReactNode;\r\n}\r\n\r\nexport interface SplitBlockProps {\r\n  // Main sections\r\n  mediaSection?: ReactNode;\r\n  contentSection?: ReactNode;\r\n\r\n  // Layout control\r\n  leftMedia?: boolean;\r\n  splitSection?: boolean; // if true - uses Grid directly after Block, otherwise uses Container\r\n\r\n  // Data for content (if not using contentSection)\r\n  content?: {\r\n    [key: string]: any; // any data for hooks\r\n  };\r\n\r\n  // Content hook system\r\n  contentHooks?: ContentHooks;\r\n\r\n  // Named slots API (optional)\r\n  // Allows overriding specific areas without custom contentSection\r\n  slots?: {\r\n    media?: ReactNode;\r\n    // Future content composition slots (used by presenters)\r\n    header?: ReactNode;\r\n    body?: ReactNode;\r\n    actions?: ReactNode;\r\n  };\r\n\r\n  // Container settings (only for splitSection=false)\r\n  containerSize?: ContainerSizingProps[\"size\"];\r\n  padding?: VariantSpacingProps[\"px\"];\r\n  py?: VariantSpacingProps[\"py\"];\r\n\r\n  // Grid settings (only for splitSection=true)\r\n  gap?: VariantGridProps[\"gap\"];\r\n  align?: VariantGridProps[\"align\"];\r\n\r\n  // Custom class name\r\n  className?: string;\r\n}\r\n\r\nconst DefaultContentSection = ({ content, contentHooks }: { content: any; contentHooks?: ContentHooks }) => {\r\n  return (\r\n    <>\r\n      {contentHooks?.beforeContent?.(content)}\r\n      {contentHooks?.content?.(content)}\r\n      {contentHooks?.afterContent?.(content)}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const SplitBlock = forwardRef<HTMLElement, SplitBlockProps>(\r\n  ({\r\n    mediaSection,\r\n    contentSection,\r\n    leftMedia = false,\r\n    splitSection = true,\r\n    content,\r\n    contentHooks,\r\n    slots,\r\n    containerSize = \"lg\",\r\n    padding = \"md\",\r\n    py = \"lg\",\r\n    gap = \"lg\",\r\n    align = \"center\",\r\n    className,\r\n    ...props\r\n  }, ref) => {\r\n\r\n    // Define the final contentSection\r\n    const finalContentSection = contentSection || (\r\n      <DefaultContentSection content={content} contentHooks={contentHooks} />\r\n    );\r\n\r\n    // Resolve media section with slot override if provided\r\n    const finalMediaSection = (slots && typeof slots.media !== \"undefined\") ? slots.media : mediaSection;\r\n\r\n    // If splitSection = false, use Container layout\r\n    if (!splitSection) {\r\n      return (\r\n        <Block\r\n          component=\"section\"\r\n          ref={ref}\r\n          w=\"full\"\r\n          py={py}\r\n          className={className}\r\n          {...props}\r\n        >\r\n          <Container size={containerSize} px={padding} centered>\r\n            <Grid cols=\"1-2\" gap={gap} align={align}>\r\n              {leftMedia ? finalMediaSection : finalContentSection}\r\n              {leftMedia ? finalContentSection : finalMediaSection}\r\n            </Grid>\r\n          </Container>\r\n        </Block>\r\n      );\r\n    }\r\n\r\n    // Split layout with Grid directly after Block (no Container)\r\n    return (\r\n      <Block\r\n        component=\"section\"\r\n        ref={ref}\r\n        w=\"full\"\r\n        py={py}\r\n        className={className}\r\n        {...props}\r\n      >\r\n        <Grid \r\n          cols=\"1-2\" \r\n          gap={gap} \r\n          align={align}\r\n          className=\"flex-1 items-center\"\r\n          data-class=\"split-grid\"\r\n        >\r\n          {leftMedia ? finalMediaSection : finalContentSection}\r\n          {leftMedia ? finalContentSection : finalMediaSection}\r\n        </Grid>\r\n      </Block>\r\n    );\r\n  }\r\n);\r\n\r\nSplitBlock.displayName = \"SplitBlock\";\r\n\r\n// Export the minimal content API\r\nexport { DefaultContentSection };\r\n\r\n// Utilities for creating hooks (escape hatch / compatibility)\r\nexport const createContentHook = (hooks: ContentHooks): ContentHooks => hooks;",
      "target": "layouts"
    }
  ]
}