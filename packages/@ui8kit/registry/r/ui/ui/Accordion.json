{
  "$schema": "https://buildy.tw/schema/registry-item.json",
  "name": "Accordion",
  "type": "registry:ui",
  "description": "",
  "dependencies": [
    "react",
    "lucide-react"
  ],
  "devDependencies": [],
  "files": [
    {
      "path": "src/ui/Accordion/Accordion.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { ChevronDown, ChevronUp } from \"lucide-react\"\r\nimport { cn, layoutVariants, flexVariants,type VariantLayoutProps, type VariantFlexProps } from \"@ui8kit/core\";\r\nimport { Button, ButtonProps } from \"@ui8kit/core\";\r\nimport { Icon } from \"@ui8kit/core\";\r\n\r\ntype AccordionContextValue = {\r\n  value: string | string[];\r\n  onItemClick: (value: string) => void;\r\n  type: \"single\" | \"multiple\";\r\n  collapsible: boolean;\r\n};\r\n\r\nconst AccordionContext = React.createContext<AccordionContextValue | null>(null);\r\n\r\nfunction useAccordionContext() {\r\n  const context = React.useContext(AccordionContext);\r\n  if (!context) {\r\n    throw new Error(\"Accordion components must be used within an <Accordion />\");\r\n  }\r\n  return context;\r\n}\r\n\r\nexport interface AccordionProps extends React.HTMLAttributes<HTMLDivElement>, Pick<VariantLayoutProps, 'w'> {\r\n  type?: \"single\" | \"multiple\";\r\n  collapsible?: boolean;\r\n  value?: string | string[];\r\n  onValueChange?: (value: string | string[]) => void;\r\n  defaultValue?: string | string[];\r\n}\r\n\r\nconst Accordion = React.forwardRef<HTMLDivElement, AccordionProps>(\r\n  ({ type = \"single\", collapsible = false, value: controlledValue, onValueChange, defaultValue, w, className, ...props }, ref) => {\r\n    const [uncontrolledValue, setUncontrolledValue] = React.useState<string | string[]>(\r\n      defaultValue ?? (type === \"multiple\" ? [] : \"\")\r\n    );\r\n\r\n    const value = controlledValue ?? uncontrolledValue;\r\n    const isMultiple = type === \"multiple\";\r\n\r\n    const onItemClick = React.useCallback((itemValue: string) => {\r\n      let newValue: string | string[];\r\n      if (isMultiple) {\r\n        newValue = Array.isArray(value) ? [...value] : [];\r\n        const itemIndex = newValue.indexOf(itemValue);\r\n        if (itemIndex > -1) {\r\n          newValue.splice(itemIndex, 1);\r\n        } else {\r\n          newValue.push(itemValue);\r\n        }\r\n      } else {\r\n        newValue = value === itemValue && collapsible ? \"\" : itemValue;\r\n      }\r\n      onValueChange?.(newValue);\r\n      if (controlledValue === undefined) {\r\n        setUncontrolledValue(newValue);\r\n      }\r\n    }, [value, onValueChange, isMultiple, collapsible, controlledValue]);\r\n\r\n    return (\r\n      <AccordionContext.Provider value={{ value, onItemClick, type, collapsible }}>\r\n        <div\r\n          ref={ref}\r\n          data-accordion\r\n          data-class=\"accordion\"\r\n          className={cn(layoutVariants({ w }), className)}\r\n          {...props}\r\n        />\r\n      </AccordionContext.Provider>\r\n    );\r\n  }\r\n);\r\nAccordion.displayName = \"Accordion\";\r\n\r\ntype AccordionItemContextValue = {\r\n  value: string;\r\n};\r\n\r\nconst AccordionItemContext = React.createContext<AccordionItemContextValue | null>(null);\r\n\r\nfunction useAccordionItemContext() {\r\n  const context = React.useContext(AccordionItemContext);\r\n  if (!context) {\r\n    throw new Error(\"AccordionItem components must be used within an <AccordionItem />\");\r\n  }\r\n  return context;\r\n}\r\n\r\nexport interface AccordionItemProps extends React.HTMLAttributes<HTMLDivElement>, Pick<VariantLayoutProps, 'w'>, Pick<VariantFlexProps, 'gap' | 'direction'> {\r\n  value: string;\r\n}\r\n\r\nconst AccordionItem = React.forwardRef<HTMLDivElement, AccordionItemProps>(\r\n  ({ value, w, gap, direction = \"col\", className, ...props }, ref) => {\r\n    const { value: contextValue, type } = useAccordionContext();\r\n    const isOpen = Array.isArray(contextValue)\r\n      ? contextValue.includes(value)\r\n      : contextValue === value;\r\n\r\n    return (\r\n      <AccordionItemContext.Provider value={{ value }}>\r\n        <div\r\n          ref={ref}\r\n          data-state={isOpen ? \"open\" : \"closed\"}\r\n          data-type={type}\r\n          data-class=\"accordion-item\"\r\n          className={cn(\r\n            \"flex\",\r\n            layoutVariants({ w }),\r\n            flexVariants({ gap, direction }),\r\n            className\r\n          )}\r\n          {...props}\r\n        />\r\n      </AccordionItemContext.Provider>\r\n    );\r\n  }\r\n);\r\nAccordionItem.displayName = \"AccordionItem\";\r\n\r\nexport interface AccordionTriggerProps extends ButtonProps, Pick<VariantLayoutProps, 'w'> {}\r\n\r\nconst AccordionTrigger = React.forwardRef<HTMLButtonElement, AccordionTriggerProps>(\r\n  ({ w, rounded, className, ...props }, ref) => {\r\n    const { onItemClick } = useAccordionContext();\r\n    const { value } = useAccordionItemContext();\r\n    const { value: contextValue } = useAccordionContext();\r\n    const isOpen = Array.isArray(contextValue)\r\n      ? contextValue.includes(value)\r\n      : contextValue === value;\r\n\r\n    return (\r\n      <Button\r\n        ref={ref}\r\n        variant=\"ghost\"\r\n        size=\"sm\"\r\n        w={w || \"full\"}\r\n        contentAlign=\"between\"\r\n        onClick={() => onItemClick(value)}\r\n        data-class=\"accordion-trigger\"\r\n        rounded={rounded}\r\n        className={className}\r\n        {...props}\r\n      >\r\n        {props.children}\r\n        <Icon component=\"span\" lucideIcon={isOpen ? ChevronUp : ChevronDown} />\r\n      </Button>\r\n    );\r\n  }\r\n);\r\nAccordionTrigger.displayName = \"AccordionTrigger\";\r\n\r\nexport interface AccordionContentProps extends React.HTMLAttributes<HTMLDivElement>, Pick<VariantLayoutProps, 'w'> {}\r\n\r\nconst AccordionContent = React.forwardRef<HTMLDivElement, AccordionContentProps>(\r\n  ({ className, w, ...props }, ref) => {\r\n    const { value } = useAccordionItemContext();\r\n    const { value: contextValue } = useAccordionContext();\r\n    const isOpen = Array.isArray(contextValue)\r\n      ? contextValue.includes(value)\r\n      : contextValue === value;\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        data-state={isOpen ? \"open\" : \"closed\"}\r\n        data-class=\"accordion-content\"\r\n        className={cn(\r\n          \"overflow-hidden text-sm transition-all data-[state=closed]:h-0 data-[state=closed]:opacity-0 data-[state=open]:h-auto data-[state=open]:opacity-100 data-[state=closed]:ms-0 data-[state=open]:ms-4\",\r\n          layoutVariants({ w }),\r\n          className\r\n        )}\r\n        {...props}\r\n      >\r\n        <div className=\"pb-4 pt-0\">{props.children}</div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\nAccordionContent.displayName = \"AccordionContent\";\r\n\r\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };",
      "target": "ui"
    }
  ]
}