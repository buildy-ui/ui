{
  "$schema": "https://buildy.tw/schema/registry-item.json",
  "name": "avatar",
  "type": "registry:ui",
  "description": "Avatar context for image loading status",
  "dependencies": [
    "react"
  ],
  "devDependencies": [],
  "files": [
    {
      "path": "utility/ui/avatar.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\n// Avatar context for image loading status\nconst AvatarContext = React.createContext<{\n  imageStatus: \"idle\" | \"loading\" | \"loaded\" | \"error\"\n  setImageStatus: (status: \"idle\" | \"loading\" | \"loaded\" | \"error\") => void\n} | null>(null)\n\nfunction Avatar({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) {\n  // Manage image loading status in context\n  const [imageStatus, setImageStatus] = React.useState<\"idle\" | \"loading\" | \"loaded\" | \"error\">(\"idle\")\n  return (\n    <AvatarContext.Provider value={{ imageStatus, setImageStatus }}>\n      <span\n        data-slot=\"avatar\"\n        className={cn(\n          \"relative flex size-8 shrink-0 overflow-hidden rounded-full\",\n          className\n        )}\n        {...props}\n      />\n    </AvatarContext.Provider>\n  )\n}\n\ninterface AvatarImageProps extends React.ImgHTMLAttributes<HTMLImageElement> { }\n\nfunction AvatarImage({ className, src, ...props }: AvatarImageProps) {\n  const ctx = React.useContext(AvatarContext)\n  const [status, setStatus] = React.useState<\"idle\" | \"loading\" | \"loaded\" | \"error\">(\"idle\")\n\n  React.useEffect(() => {\n    if (!src) {\n      setStatus(\"error\")\n      ctx?.setImageStatus(\"error\")\n      return\n    }\n    setStatus(\"loading\")\n    ctx?.setImageStatus(\"loading\")\n    const img = new window.Image()\n    img.src = src\n    img.onload = () => {\n      setStatus(\"loaded\")\n      ctx?.setImageStatus(\"loaded\")\n    }\n    img.onerror = () => {\n      setStatus(\"error\")\n      ctx?.setImageStatus(\"error\")\n    }\n    // Clean up\n    return () => {\n      img.onload = null\n      img.onerror = null\n    }\n  }, [src])\n\n  if (status !== \"loaded\") return null\n  return (\n    <img\n      data-slot=\"avatar-image\"\n      className={cn(\"aspect-square size-full\", className)}\n      src={src}\n      {...props}\n    />\n  )\n}\n\ninterface AvatarFallbackProps extends React.HTMLAttributes<HTMLSpanElement> {\n  delayMs?: number\n}\n\nfunction AvatarFallback({ className, delayMs, ...props }: AvatarFallbackProps) {\n  const ctx = React.useContext(AvatarContext)\n  const [canRender, setCanRender] = React.useState(delayMs === undefined)\n\n  React.useEffect(() => {\n    if (delayMs !== undefined) {\n      const timer = setTimeout(() => setCanRender(true), delayMs)\n      return () => clearTimeout(timer)\n    }\n  }, [delayMs])\n\n  if (!canRender) return null\n  if (ctx?.imageStatus === \"loaded\") return null\n  return (\n    <span\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        \"bg-muted flex size-full items-center justify-center rounded-full\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Avatar, AvatarImage, AvatarFallback }",
      "target": "ui"
    }
  ]
}