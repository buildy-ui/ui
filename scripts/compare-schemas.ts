import { z } from "zod"
import fs from "fs/promises"
import path from "path"

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ —Å—Ö–µ–º—ã –∏–∑ schema.ts
import { 
  registryItemSchema, 
  registrySchema, 
  registryItemTypeSchema 
} from "./schema"

// –ò—Å–∫–ª—é—á–µ–Ω–∏—è - —Ç–∏–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Ö–æ—Ç–∏–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—à–µ–π —Å—Ö–µ–º–µ
const EXCLUDED_TYPES = [
  "registry:hook",
  "registry:page", 
  "registry:file",
  "registry:theme",
  "registry:style",
  "registry:item",
  "registry:example",
  "registry:internal"
]

// –ù–∞—à–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –∏–∑ BuildY/UI8Kit
const BUILDY_TYPES = [
  "registry:ui",
  "registry:block", 
  "registry:component",
  "registry:lib",
  "registry:template"
]

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ö–µ–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
async function loadSchemas() {
  // –ù–∞—à–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞
  const registryPath = path.join(process.cwd(), "packages/ui8kit-registry/r/schema/registry.json")
  const registryItemPath = path.join(process.cwd(), "packages/ui8kit-registry/r/schema/registry-item.json")
  
  const localRegistryContent = await fs.readFile(registryPath, "utf-8")
  const localRegistryItemContent = await fs.readFile(registryItemPath, "utf-8")
  
  // –°—Ö–µ–º–∞ shadcn/ui (–∏–∑ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
  const shadcnRegistryItemPath = path.join(process.cwd(), "scripts/registry-item.json")
  const shadcnRegistryItemContent = await fs.readFile(shadcnRegistryItemPath, "utf-8")
  
  // –≠—Ç–∞–ª–æ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ registry.json –æ—Ç shadcn/ui (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è)
  const shadcnRegistry = {
    "properties": {
      "$schema": { "type": "string" },
      "name": { "type": "string" },
      "homepage": { "type": "string" },
      "items": { "type": "array" }
    },
    "required": ["name", "homepage", "items"]
  }
  
  return {
    // –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ —Å—Ö–µ–º—ã –∏–∑ schema.ts
    reference: {
      registry: registrySchema.shape,
      registryItem: registryItemSchema.shape
    },
    // –ù–∞—à–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞
    local: {
      registry: JSON.parse(localRegistryContent),
      registryItem: JSON.parse(localRegistryItemContent)
    },
    // –°—Ö–µ–º–∞ shadcn/ui
    shadcn: {
      registry: shadcnRegistry,
      registryItem: JSON.parse(shadcnRegistryItemContent)
    }
  }
}

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Zod —Å—Ö–µ–º—ã –≤ –ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
function zodSchemaToComparable(zodShape: any): any {
  const properties: any = {}
  const required: string[] = []
  
  for (const [key, value] of Object.entries(zodShape)) {
    properties[key] = { type: "mixed" } // —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
    if (value && typeof value === 'object' && 'isOptional' in value) {
      if (!(value as any).isOptional()) {
        required.push(key)
      }
    }
  }
  
  return { properties, required }
}

// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ö–µ–º
function compareSchemas(schema1: any, schema2: any, schema1Name: string, schema2Name: string): string[] {
  const differences: string[] = []
  
  const props1 = schema1.properties || {}
  const props2 = schema2.properties || {}
  
  // –ü–æ–ª—è —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤–æ–π —Å—Ö–µ–º–µ
  for (const key of Object.keys(props1)) {
    if (!(key in props2)) {
      differences.push(`‚ùå ${schema1Name}: –ø–æ–ª–µ "${key}" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ ${schema2Name}`)
    }
  }
  
  // –ü–æ–ª—è —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ö–µ–º–µ
  for (const key of Object.keys(props2)) {
    if (!(key in props1)) {
      differences.push(`‚ûï ${schema2Name}: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ "${key}" (–Ω–µ—Ç –≤ ${schema1Name})`)
    }
  }
  
  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ required –ø–æ–ª–µ–π
  const required1 = schema1.required || []
  const required2 = schema2.required || []
  
  for (const field of required1) {
    if (!required2.includes(field)) {
      differences.push(`‚ùå ${schema1Name}: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ "${field}" –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ ${schema2Name}`)
    }
  }
  
  for (const field of required2) {
    if (!required1.includes(field)) {
      differences.push(`‚ûï ${schema2Name}: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ "${field}" –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ ${schema1Name}`)
    }
  }
  
  return differences
}

// –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤
function analyzeTypes() {
  // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –∏–∑ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Å—Ö–µ–º—ã
  const referenceTypes = registryItemTypeSchema._def.values
  
  const analysis = {
    referenceTypes,
    buildyTypes: BUILDY_TYPES,
    excluded: EXCLUDED_TYPES,
    buildyMissing: [] as string[],
    buildyExtra: [] as string[],
    shadcnMissing: [] as string[],
    shadcnExtra: [] as string[]
  }
  
  // –ê–Ω–∞–ª–∏–∑ BuildY —Ç–∏–ø–æ–≤
  for (const type of referenceTypes as string[]) {
    if (!BUILDY_TYPES.includes(type) && !EXCLUDED_TYPES.includes(type)) {
      analysis.buildyMissing.push(type)
    }
  }
  
  for (const type of BUILDY_TYPES) {
    if (!(referenceTypes as string[]).includes(type)) {
      analysis.buildyExtra.push(type)
    }
  }
  
  return analysis
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log("üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ö–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —ç—Ç–∞–ª–æ–Ω–æ–º schema.ts\n")
  
  try {
    const schemas = await loadSchemas()
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ Zod —Å—Ö–µ–º—ã –≤ —Å—Ä–∞–≤–Ω–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    const referenceRegistry = zodSchemaToComparable(schemas.reference.registry)
    const referenceRegistryItem = zodSchemaToComparable(schemas.reference.registryItem)
    
    console.log("üìã –ê–Ω–∞–ª–∏–∑ registry.json")
    console.log("=" + "=".repeat(70))
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–∞—à—É —Å—Ö–µ–º—É —Å —ç—Ç–∞–ª–æ–Ω–æ–º
    const localRegistryDiffs = compareSchemas(
      referenceRegistry,
      schemas.local.registry,
      "—ç—Ç–∞–ª–æ–Ω (schema.ts)",
      "BuildY (local)"
    )
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ö–µ–º—É shadcn —Å —ç—Ç–∞–ª–æ–Ω–æ–º
    const shadcnRegistryDiffs = compareSchemas(
      referenceRegistry,
      schemas.shadcn.registry,
      "—ç—Ç–∞–ª–æ–Ω (schema.ts)",
      "shadcn/ui"
    )
    
    if (localRegistryDiffs.length === 0) {
      console.log("‚úÖ BuildY registry.json –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–∞–ª–æ–Ω—É")
    } else {
      console.log("üìä –†–∞–∑–ª–∏—á–∏—è BuildY registry.json —Å —ç—Ç–∞–ª–æ–Ω–æ–º:")
      localRegistryDiffs.forEach(diff => console.log(`  ${diff}`))
    }
    
    if (shadcnRegistryDiffs.length === 0) {
      console.log("\n‚úÖ shadcn/ui registry.json –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–∞–ª–æ–Ω—É")
    } else {
      console.log("\nüìä –†–∞–∑–ª–∏—á–∏—è shadcn/ui registry.json —Å —ç—Ç–∞–ª–æ–Ω–æ–º:")
      shadcnRegistryDiffs.forEach(diff => console.log(`  ${diff}`))
    }
    
    console.log("\nüìã –ê–Ω–∞–ª–∏–∑ registry-item.json")
    console.log("=" + "=".repeat(70))
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º registry-item —Å—Ö–µ–º—ã
    const localItemDiffs = compareSchemas(
      referenceRegistryItem,
      schemas.local.registryItem,
      "—ç—Ç–∞–ª–æ–Ω (schema.ts)",
      "BuildY (local)"
    )
    
    const shadcnItemDiffs = compareSchemas(
      referenceRegistryItem,
      schemas.shadcn.registryItem,
      "—ç—Ç–∞–ª–æ–Ω (schema.ts)",
      "shadcn/ui"
    )
    
    if (localItemDiffs.length === 0) {
      console.log("‚úÖ BuildY registry-item.json –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–∞–ª–æ–Ω—É")
    } else {
      console.log("üìä –†–∞–∑–ª–∏—á–∏—è BuildY registry-item.json —Å —ç—Ç–∞–ª–æ–Ω–æ–º:")
      localItemDiffs.forEach(diff => console.log(`  ${diff}`))
    }
    
    if (shadcnItemDiffs.length === 0) {
      console.log("\n‚úÖ shadcn/ui registry-item.json –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–∞–ª–æ–Ω—É")
    } else {
      console.log("\nüìä –†–∞–∑–ª–∏—á–∏—è shadcn/ui registry-item.json —Å —ç—Ç–∞–ª–æ–Ω–æ–º:")
      shadcnItemDiffs.forEach(diff => console.log(`  ${diff}`))
    }
    
    console.log("\nüè∑Ô∏è –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    console.log("=" + "=".repeat(70))
    
    const typeAnalysis = analyzeTypes()
    
    console.log("üìå –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ —Ç–∏–ø—ã (schema.ts):")
    for (const type of typeAnalysis.referenceTypes as string[]) {
      console.log(`  üî∑ ${type}`)
    }
    
    console.log("\nüìå –¢–µ–∫—É—â–∏–µ —Ç–∏–ø—ã BuildY/UI8Kit:")
    typeAnalysis.buildyTypes.forEach(type => console.log(`  ‚úÖ ${type}`))
    
    console.log("\nüìå –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ BuildY):")
    typeAnalysis.excluded.forEach(type => console.log(`  ‚è≠Ô∏è ${type}`))
    
    if (typeAnalysis.buildyMissing.length > 0) {
      console.log("\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø—ã –≤ BuildY:")
      typeAnalysis.buildyMissing.forEach(type => console.log(`  ‚ùå ${type}`))
    }
    
    if (typeAnalysis.buildyExtra.length > 0) {
      console.log("\n‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã –≤ BuildY:")
      typeAnalysis.buildyExtra.forEach(type => console.log(`  ‚ûï ${type}`))
    }
    
    console.log("\nüìä –°–≤–æ–¥–∫–∞")
    console.log("=" + "=".repeat(70))
    console.log(`‚Ä¢ –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ —Ç–∏–ø—ã: ${(typeAnalysis.referenceTypes as string[]).length}`)
    console.log(`‚Ä¢ –¢–∏–ø—ã BuildY: ${typeAnalysis.buildyTypes.length}`)
    console.log(`‚Ä¢ –ò—Å–∫–ª—é—á–µ–Ω–∏—è: ${typeAnalysis.excluded.length}`)
    console.log(`‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ BuildY: ${typeAnalysis.buildyMissing.length}`)
    console.log(`‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤ BuildY: ${typeAnalysis.buildyExtra.length}`)
    
    // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π
    console.log("\nüîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π registry-item.json")
    console.log("=" + "=".repeat(70))
    
    const referenceProps = Object.keys(referenceRegistryItem.properties || {})
    const localProps = Object.keys(schemas.local.registryItem.properties || {})
    const shadcnProps = Object.keys(schemas.shadcn.registryItem.properties || {})
    
    console.log("üìå –ü–æ–ª—è –≤ —ç—Ç–∞–ª–æ–Ω–µ (schema.ts):")
    referenceProps.forEach(prop => console.log(`  ‚Ä¢ ${prop}`))
    
    console.log("\nüìå –ü–æ–ª—è –≤ BuildY —Å—Ö–µ–º–µ:")
    localProps.forEach(prop => console.log(`  ‚Ä¢ ${prop}`))
    
    console.log("\nüìå –ü–æ–ª—è –≤ shadcn/ui —Å—Ö–µ–º–µ:")
    shadcnProps.forEach(prop => console.log(`  ‚Ä¢ ${prop}`))
    
    // –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –¥–ª—è CLI
    console.log("\nüéØ –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê –î–õ–Ø CLI")
    console.log("=" + "=".repeat(70))
    
    const localMissingFields = localItemDiffs.filter(d => d.includes('‚ùå')).length
    const buildyMissingFields = localItemDiffs.filter(d => d.includes('–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ BuildY')).length
    
    console.log(`üìã BuildY –æ—Ç—Å—Ç–∞–µ—Ç –æ—Ç —ç—Ç–∞–ª–æ–Ω–∞ –Ω–∞ ${buildyMissingFields} –ø–æ–ª–µ–π`)
    console.log(`üìã shadcn/ui –±–ª–∏–∂–µ –∫ —ç—Ç–∞–ª–æ–Ω—É (–≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –µ—Å—Ç—å)`)
    console.log(`üìã registry:template - —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ñ–∏—á–∞ BuildY`)
    console.log(`üìã –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ BuildY:`)
    console.log(`   ‚Ä¢ title - —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ`)
    console.log(`   ‚Ä¢ registryDependencies - –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`)
    console.log(`   ‚Ä¢ tailwind - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Tailwind`)
    console.log(`   ‚Ä¢ cssVars - CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ`)
    console.log(`   ‚Ä¢ meta - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ`)
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
    console.log("=" + "=".repeat(70))
    
    const totalLocalIssues = localRegistryDiffs.filter(d => d.includes('‚ùå')).length + 
                             localItemDiffs.filter(d => d.includes('‚ùå')).length
    
    if (totalLocalIssues === 0) {
      console.log("‚úÖ BuildY —Å—Ö–µ–º—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å —ç—Ç–∞–ª–æ–Ω–æ–º")
    } else {
      console.log("üìù –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å BuildY —Å—Ö–µ–º—ã –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —ç—Ç–∞–ª–æ–Ω–æ–º")
    }
    
    if (typeAnalysis.buildyExtra.length > 0) {
      console.log("‚úÖ registry:template - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–∏–ø BuildY –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤")
    }
    
    console.log("üéØ –≠—Ç–∞–ª–æ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ schema.ts –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã")
    console.log("üîÑ CLI –¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ö–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ schema.ts")
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å—Ö–µ–º:", error)
    process.exit(1)
  }
}

main() 